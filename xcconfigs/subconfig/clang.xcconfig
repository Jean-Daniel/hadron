
GCC_C_LANGUAGE_STANDARD = c99


GCC_VERSION = com.apple.compilers.llvm.clang.nightly
CLANG = /opt/llvm/nightly/bin/clang
CLANG_ANALYZER_EXEC = $(CLANG)

GCC_C_LANGUAGE_STANDARD = c11

CLANG_CXX_LANGUAGE_STANDARD = c++0x
CLANG_CXX_LIBRARY = libc++

CLANG_WARN_OBJCPP_ARC_ABI = YES

CLANG_WARN_IMPLICIT_SIGN_CONVERSION = NO
// -Wconversion does not have an useless semantic in clang
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = NO

CLANG_X86_VECTOR_INSTRUCTIONS[arch=x86_64] = ssse3

// Usefull thanks to -Wno-idiomatic-parentheses
GCC_WARN_MISSING_PARENTHESES = NO

// Work even in debug build in clang :-)
GCC_WARN_UNINITIALIZED_AUTOS = YES

CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES

// Should be true but cause duplicate class warning at runtime.
CLANG_LINK_OBJC_RUNTIME = NO

// Static Analyzer
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES

// CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES

// clang specifics flags
WB_COMPILER_OTHER_FLAGS = -ferror-limit=50
WB_COMPILER_OTHER_CFLAGS =
WB_COMPILER_OTHER_CPLUSPLUSFLAGS =

// -Wmissing-noreturn
// -Wunreachable-code
// -Wused-but-marked-unused
// -Wno-idiomatic-parentheses: assignement used as condition with method starting by -init or with -nextObject.
WB_COMPILER_WARNING_FLAGS = -Wno-idiomatic-parentheses -Wenum-compare -Warray-bounds -Wlarge-by-value-copy -Wself-assign -Wold-style-cast -Wavailability -Wsentinel -Wunreachable-code
WB_COMPILER_WARNING_CFLAGS =
WB_COMPILER_WARNING_CPLUSPLUSFLAGS = -Woverloaded-virtual
